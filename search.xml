<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Linux命令学习之ps]]></title>
    <url>%2F2018%2F10%2F19%2FLinux%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0%E4%B9%8Bps%2F</url>
    <content type="text"><![CDATA[ps命令详解Linux上进程有五种状态 运行（正在运行或在运行队列中等待） 中断（休眠中，受阻，在等待某个条件的行程或接受到信号） 不可中断 僵死（进程已经终止，但进程描述符存在） 停止（进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行） ps工具标识进程的五种状态码 D：不可中断 R：运行中 S：中断 T：停止 Z：僵死 ps命令名称：ps使用权限：所有使用者使用方式：ps /[options/] /[–help/]说明：显示瞬间进程的动态参数： 12345//ps的参数较多，以下仅列出常用几个-A 列出所有进程-w 显示加宽可以显示更多的信息-au 显示较详细的信息-aux 显示所有包含其他使用者的进程信息 举例说明au(x)所显示的每列所指内容。-aux的输出格式:USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND每列所指内容分别为：1234567891011USER：进程拥有者PID：进程ID%CPU：占用的CPU使用率%MEM：占用的内存使用率VSZ：占用的虚拟内存大小RSS：占用的磁盘大小TTY：进程所属的终端控制台STAT：进程状态码（下面有详细说明）START：进程开始时间TIME：执行时间COMMAND：执行的命令 其中进程状态码有以下等：123456789D: 不可中断的静止 R: 正在执行中 S: 静止状态 T: 暂停执行 Z: 不存在但暂时无法消除，僵死状态 W: 没有足够的记忆体分页可分配 &lt;: 高优先序的进程 N: 低优先序的进程 L: 有记忆体分页分配并锁在记忆体内 最常用的方法是ps -aux,然后再利用一个管道符号导向到grep去查找特定的进程,然后再对特定的进程进行操作。 与top的区别ps是提供给你当前进程的快照，而top是即时显示活跃的进程。更多top相关的命令可查阅top命令的文章]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo引用图片]]></title>
    <url>%2F2018%2F10%2F18%2Ftest-img%2F</url>
    <content type="text"><![CDATA[hexo引用图片安装插件npm install https://github.com/CodeFalling/hexo-asset-image --save 使用语法跟正常的Markdown引用图片一样，只是路径使用的是相对路径。在你安装插件之后，使用hexo new &quot;新博客&quot;生成新博客时。_post文件夹下会有个跟新博客同名的文件夹，该文件夹下就是用来放置你引用的图片的。在博客中你可以这样使用xxxx![图片名称](文件夹名称/图片名称 &quot;图片标题&quot;)xxxx，xxxx指的是你的博客内容，图片名称就是显示在图片下面的名称，图片标题就是鼠标放上去显示的文字。例如我使用![我是图片](test-img/1.jpg &quot;测试图片&quot;)，实现效果为：]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux下修改主机名]]></title>
    <url>%2F2018%2F10%2F18%2FLinux%E4%B8%8B%E4%BF%AE%E6%94%B9%E4%B8%BB%E6%9C%BA%E5%90%8D%2F</url>
    <content type="text"><![CDATA[Linux下修改主机名hostname + 主机名这种修改只是暂时有效，在当前Linux运行期间有效。重启后就失效了。 修改/etc/hosts这种方法文件里的主机名只是用来提供给dns解析的.如果你用不上dns,只需要修改主机名,那修改这个没用。 修改这个文件etc/sysconfig/network里的主机名这种方法可以实现永久修改主机名，需要重启Linux后才能生效。12NETWORKING=yesHOSTNAME=主机名 总结： #hostname 新主机名 修改/etc/sysconfig/network中的hostname的值 修改/etc/hosts文件]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[多电脑发布hexo博客]]></title>
    <url>%2F2018%2F10%2F12%2F%E5%A4%9A%E7%94%B5%E8%84%91%E5%8F%91%E5%B8%83hexo%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[多电脑发布hexo博客准备github账号在github上注册账号，并新建仓库。 安装nodejs按照网上的教程安装nodejs和hexo，教程很多不赘述了。 github上新建分支，将部署源码提交上去在博客库新建分支xxx，例如笔者命名为hexo分支，将部署源码提交上去。这里需要修改.gitignore文件，将不必要提交的本地配置等文件加进去。 另一台电脑安装hexo，clone部署源码另一台电脑安装和部署好hexo的环境，配置好Git，clone部署源码，就可以协同发布了。 #总结现在一个电脑上提交部署源码到git上，后面就是在git上协同发布博客的操作。电脑A123git add .git commit -m "提交部署源码"git push origin hexo //初次将部署源码提交上hexo分支 电脑B1234git pull //先更新下本地内容，再修改，再提交git add .git commit -m ""git push origin hexo 电脑A1234git pull //先更新下本地内容，再修改，再提交git add .git commit -m ""git push origin hexo]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F10%2F09%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[rabbitmq实例]]></title>
    <url>%2F2018%2F10%2F08%2Frabbitmq%E5%AE%9E%E4%BE%8B%2F</url>
    <content type="text"></content>
      <categories>
        <category>rabbitmq</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RabbitMQ入门]]></title>
    <url>%2F2018%2F10%2F08%2Frabbitmq%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[概念说明名词介绍Broker：简单来说就是消息队列服务器实体。Exchange：消息交换机，它指定消息按什么规则，路由到哪个队列。Queue：消息队列载体，每个消息都会被投入到一个或多个队列。Binding：绑定，它的作用就是把exchange和queue按照路由规则绑定起来。Routing Key：路由关键字，exchange根据这个关键字进行消息投递。vhost：虚拟主机，一个broker里可以开设多个vhost，用作不同用户的权限分离。producer：消息生产者，就是投递消息的程序。consumer：消息消费者，就是接受消息的程序。channel：消息通道，在客户端的每个连接里，可建立多个channel，每个channel代表一个会话任务。 流程说明消息队列的使用过程大概如下：(1)客户端连接到消息队列服务器，打开一个channel。(2)客户端声明一个exchange，并设置相关属性。(3)客户端声明一个queue，并设置相关属性。(4)客户端使用routing key，在exchange和queue之间建立好绑定关系。(5)客户端投递消息到exchange。 exchange接收到消息后，就根据消息的key和已经设置的binding，进行消息路由，将消息投递到一个或多个队列里。exchange也有几个类型，完全根据key进行投递的叫做Direct交换机，例如，绑定时设置了routing key为”abc”，那么客户端提交的消息，只有设置了key为”abc”的才会投递到队列。对key进行模式匹配后进行投递的叫做Topic交换机，符号”#”匹配一个或多个词，符号”*”匹配正好一个词。例如”abc.#”匹配”abc.def.ghi”，”abc.*”只匹配”abc.def”。还有一种不需要key的，叫做Fanout交换机，它采取广播模式，一个消息进来时，投递到与该交换机绑定的所有队列。 RabbitMQ支持消息的持久化，也就是数据写在磁盘上，为了数据安全考虑，我想大多数用户都会选择持久化。消息队列持久化包括3个部分：(1)exchange持久化，在声明时指定durable =&gt; 1(2)queue持久化，在声明时指定durable =&gt; 1(3)消息持久化，在投递时指定delivery_mode =&gt; 2（1是非持久化）如果exchange和queue都是持久化的，那么它们之间的binding也是持久化的。如果exchange和queue两者之间有一个持久化，一个非持久化，就不允许建立绑定。 安装略]]></content>
      <categories>
        <category>rabbitmq</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>rabbitmq</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql嵌套事务的隐式提交]]></title>
    <url>%2F2018%2F10%2F08%2Fmysql%E5%B5%8C%E5%A5%97%E4%BA%8B%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[mysql官方文档是表明不支持嵌套事务的。在一个事务中开启另一个事务，会隐式commit外层事务。 示例新建一个测试表（建表SQL略），表名：demo，字段：id（自增），txt。开启事务如下：123456START TRANSACTION;INSERT INTO demo (txt) VALUES ('job');START TRANSACTION;INSERT INTO demo (txt) VALUES ('cook');COMMIT;ROLLBACK; 当你只执行前两句SQL时，此时观察表中并没有txt为job的数据。当你执行前三句你会发现表中已经有了txt为job的数据。 相关还有以下一些关键词会触发mysql的隐式提交。123456789101112131415161718192021ALTER FUNCTION ALTER PROCEDURE ALTER TABLE BEGIN CREATE DATABASE CREATE FUNCTION CREATE INDEX CREATE PROCEDURE CREATE TABLE DROP DATABASE DROP FUNCTION DROP INDEX DROP PROCEDURE DROP TABLE UNLOCK TABLES LOAD MASTER DATA LOCK TABLES RENAME TABLE TRUNCATE TABLE SET AUTOCOMMIT=1 START TRANSACTION]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IDE破解教程]]></title>
    <url>%2F2018%2F10%2F08%2FIDE%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[分享一个IDE破解教程，我是网址 修改hosts文件win下找到hosts文件，在hosts文件中添加“0.0.0.0 account.jetbrains.com”这行内容。Mac直接在终端使用vim编辑1$ vi /etc/hosts 复制注册码打开网址，点击获取注册码，copy过去就OK了]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>ide</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[入门]]></title>
    <url>%2F2018%2F04%2F20%2Fdemo%2F</url>
    <content type="text"><![CDATA[This is a demo for studying to write blog by markdown, welcome to my github! 简单入门1.命令创建新文章1$ hexo new "文章名" //创建新的博客文章 发布文章123//当你编辑完新的文章，需要下面的命令更新并发布到github上$ hexo clean $ hexo g -d 2.关于更多关于hexo的使用可以到官网查看！]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
</search>
